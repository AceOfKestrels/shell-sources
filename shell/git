#!/usr/bin/env sh

alias gs='git status'
alias gco='git checkout'
alias gr='git rebase'
alias gf='git fetch'
alias gpl='git pull'

# Chatty says this works, please try it out some time
# Enable completion in both Bash and Zsh
# if [ -n "$BASH_VERSION" ]; then
#     # Bash completion
#     complete -o default -o nospace -F _git_add ga
# elif [ -n "$ZSH_VERSION" ]; then
#     # Zsh completion
#     autoload -Uz compinit && compinit
#     compdef _git ga=git-add
# fi

# __git_complete gp _git_checkout
# __git_complete gco _git_checkout
# __git_complete gr _git_checkout
# __git_complete gri _git_checkout
# __git_complete ga _git_add
# __git_complete gre _git_add
# __git_complete gca _git_add
# __git_complete gac _git_add

gl() {
    if [ -z "$1" ]
    then
        git log --oneline --graph --all "$@"
        return
    fi

    local arg="$1"
    shift

    case "$arg" in
        -h|--help)
            echo "gl: \"git log\""
            echo "usage: \"gl <option>\""
            echo ""
            echo "options:"
            echo "  -h --help       Display this help"
            echo "  -v --verbose    Default git log"
            echo ""
            echo "additional arguments will be passed to git log"
        ;;
        -v|--verbose)
            git log "$@"
        ;;
        *)
            git log --oneline --graph --all "$arg" "$@"
        ;;
    esac
}

ga() {
    git add "${@:-.}"
}

gc() {
    if [ -z "$1" ] 
    then
        echo "error: commit message requires a value"
        echo ""
        echo "gc: \"git commit with message\""
        echo "usage: \"gc [commit message]\""
        echo ""
        echo "options:"
        echo "  -f --force  Ignore the length limit of commit messages"
        return
    fi

    local message="$1"
    shift
    
    if ! [ "$1" = "--force" ] && ! [ "$1" = "-f" ] 
    then
        __checkCommitMessageLength "$message"
        if [ "$retVal" != 0 ]
        then
            return
        fi
    fi

    git commit -m "$message"
}

gac() {
    if [ -z "$1" ] 
    then
        echo "error: commit message requires a value"
        echo ""
        echo "gac: \"git stage and commit\""
        echo "usage: \"gac [commit message] <options> <files to stage>\""
        echo ""
        echo "options:"
        echo "  -f --force  Ignore the length limit of commit messages"
        return
    fi

    local message="$1"
    shift

    if [ "$1" = "--force" ] || [ "$1" = "-f" ]
    then
        shift
        ga "$@"
        gc "$message" -f
        return
    fi
    
    __checkCommitMessageLength "$message"
    if [ "$retVal" != 0 ]
    then
        return
    fi

    ga "$@"
    git commit -m "$message"
}

gca() {
    changes=$(git diff --stat -- "${@:-.}")
    
    if [ -z "$changes" ]
    then
        git status
        return
    fi

    echo "[$(git rev-parse --abbrev-ref HEAD) $(git log -1 --pretty=%h)] $(git log -1 --pretty=%s)"
    echo "$changes"
    ga "$@"
    error_message=$(git commit --amend --no-edit 2>&1 > /dev/null)
    
    if [ -n "$error_message" ]
    then
        echo "$error_message"
    fi
}

gri() {
    if [ -z "$1" ] 
    then
        echo "error: count requires a value"
        echo ""
        echo "gri: \"git rebase interactive (from head)\""
        echo "usage: \"gri <count> [options]\""
        echo "options:"
        echo "  -v --verbatim  Take the edited commit message verbatim. Allows for the message to start with #. Remember to remove the additional lines in the rebase editor!"
        return
    fi

    if [ "$2" = "-v" ] | [ "$2" = "--verbatim" ]
    then
        git -c commit.cleanup=verbatim rebase -i head~"$1"
    else
        git rebase -i head~"$1"
    fi
}

gwt() {
    if [ -z "$1" ]
    then
        git worktree list
        return
    fi

    arg1="$1"
    shift

    case "$arg1" in
        add | a)
            __addgwt "$@"
            return
        ;;
        remove | r)
            __removegwt "$@"
            return
        ;;
        list | l)
            git worktree list
            return
        ;;
        cd)
            __cdgwt "$@"
            return
        ;;
    esac
    
    __helpgwt
}

gre() {
    git restore "${@:-.}"
}

gp() {
    if ! [ -z "$1" ] || git rev-parse --abbrev-ref @{u} >/dev/null 2>&1;
    then
        git push "$@"
        return
    fi

    branch_name=$(git rev-parse --abbrev-ref HEAD)
    git push -u origin "$branch_name"
}

gitinit() {
    git init
    
    if [ ! -f .gitignore ]
    then
        echo "Creating default gitignore"
        {
            echo ".vs/"
            echo ".idea/"
            echo "obj/"
            echo "bin/"
        } > .gitignore
    fi

}